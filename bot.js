require('dotenv').config();

const { Telegraf, Markup, session } = require('telegraf');
const cron = require('node-cron');
const { infoText, pricesText } = require('./data/info.js');
const {
  getAvailableSlots,
  reserveSlot,
  addSlot,
  removeSlot,
  listAllSlots,
  getUserBookings,
  cancelBooking,
  getUpcomingBookings,
  getAllBookedSlots,
} = require('./data/slots.js');
const {
  initCalendar,
  createCalendarEvent,
  deleteCalendarEvent,
  isCalendarEnabled,
} = require('./data/calendar.js');

const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
  // –Ø–≤–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ–∫–µ–Ω–∞
  console.error('BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.');
  process.exit(1);
}

const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID ? Number(process.env.ADMIN_CHAT_ID) : undefined;
const TIMEZONE = process.env.TZ || 'Europe/Moscow';

const bot = new Telegraf(BOT_TOKEN);
bot.use(session());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Calendar
initCalendar();

// –†–µ–∑–µ—Ä–≤–Ω–∞—è in-memory —Å–µ—Å—Å–∏—è –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è session() –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–∏–ø–∞—Ö –∞–ø–¥–µ–π—Ç–æ–≤
const inMemorySessions = new Map();
bot.use(async (ctx, next) => {
  if (ctx.session === undefined) {
    const key = (ctx.chat && ctx.chat.id) || (ctx.from && ctx.from.id);
    if (key) {
      if (!inMemorySessions.has(key)) inMemorySessions.set(key, {});
      ctx.session = inMemorySessions.get(key);
      await next();
      inMemorySessions.set(key, ctx.session || {});
      return;
    }
  }
  return next();
});

const toLocalTimeString = (isoString) => {
  return new Date(isoString).toLocaleString('ru-RU', {
    timeZone: TIMEZONE,
    hour12: false,
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
  });
};

const buildMainMenu = () =>
  Markup.inlineKeyboard([
    [Markup.button.callback('‚ÑπÔ∏è –û–±—É—á–µ–Ω–∏–µ', 'INFO')],
    [Markup.button.callback('üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å', 'PRICES')],
    [Markup.button.callback('üìÖ –°–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã', 'SLOTS')],
    [Markup.button.callback('üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', 'BOOK')],
    [Markup.button.callback('üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', 'MYBOOKINGS')],
    [Markup.button.callback('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', 'ASK')],
  ]);

const sendSlotsList = async (ctx) => {
  const available = getAvailableSlots();
  if (available.length === 0) {
    return ctx.reply('–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ /ask –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏.');
  }
  const lines = available.map((s) => `‚Ä¢ ${toLocalTimeString(s.startAt)} ‚Äî —Å–≤–æ–±–æ–¥–Ω–æ`);
  return ctx.reply(`–ë–ª–∏–∂–∞–π—à–∏–µ —Å–ª–æ—Ç—ã (–≤—Ä–µ–º—è: ${TIMEZONE}):\n\n${lines.join('\n')}`);
};

const sendBookingKeyboard = async (ctx) => {
  const available = getAvailableSlots();
  if (available.length === 0) {
    return ctx.reply('–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ /ask.');
  }
  const keyboard = available.map((s) => [
    Markup.button.callback(`${toLocalTimeString(s.startAt)}`, `BOOK_SLOT:${s.id}`),
  ]);
  return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç:', Markup.inlineKeyboard(keyboard));
};

bot.telegram.setMyCommands([
  { command: 'start', description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },
  { command: 'info', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—É—á–µ–Ω–∏–∏' },
  { command: 'prices', description: '–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π' },
  { command: 'slots', description: '–°–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã' },
  { command: 'book', description: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ' },
  { command: 'mybookings', description: '–ú–æ–∏ –∑–∞–ø–∏—Å–∏' },
  { command: 'ask', description: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É' },
  { command: 'stats', description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)' },
  { command: 'cancel', description: '–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è' },
]).catch(() => {});

bot.start(async (ctx) => {
  await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –ß–µ–º –ø–æ–º–æ—á—å?',
    buildMainMenu()
  );
});

bot.command('info', async (ctx) => {
  await ctx.reply(infoText, buildMainMenu());
});

bot.command('prices', async (ctx) => {
  await ctx.reply(pricesText, buildMainMenu());
});

bot.command('slots', async (ctx) => {
  await sendSlotsList(ctx);
});

bot.command('book', async (ctx) => {
  await sendBookingKeyboard(ctx);
});

bot.command('ask', async (ctx) => {
  ctx.session.mode = 'awaiting_question';
  await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel');
});

bot.command('cancel', async (ctx) => {
  ctx.session.mode = undefined;
  await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.', buildMainMenu());
});

bot.command('mybookings', async (ctx) => {
  const bookings = getUserBookings(ctx.from.id);
  if (bookings.length === 0) {
    return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.', buildMainMenu());
  }

  const keyboard = bookings.map((b) => [
    Markup.button.callback(
      `${toLocalTimeString(b.startAt)} - –û—Ç–º–µ–Ω–∏—Ç—å ‚ùå`,
      `CANCEL_BOOKING:${b.id}`
    ),
  ]);
  
  await ctx.reply(
    '–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n' + 
    bookings.map((b) => `‚Ä¢ ${toLocalTimeString(b.startAt)}`).join('\n'),
    Markup.inlineKeyboard(keyboard)
  );
});

bot.command('stats', async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
  if (!ADMIN_CHAT_ID || ctx.from.id !== ADMIN_CHAT_ID) {
    return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
  }

  const allSlots = listAllSlots();
  const bookedSlots = getAllBookedSlots();
  const availableSlots = getAvailableSlots();
  
  // –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const uniqueUsers = new Set(bookedSlots.map((s) => s.bookedBy));
  
  // –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏—Ö –∏ –±—É–¥—É—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π
  const now = new Date();
  const pastBookings = bookedSlots.filter((s) => new Date(s.startAt) < now);
  const futureBookings = bookedSlots.filter((s) => new Date(s.startAt) >= now);

  const statsMessage = 
    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n` +
    `üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${uniqueUsers.size}\n` +
    `üìÖ –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: ${allSlots.length}\n` +
    `‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${bookedSlots.length}\n` +
    `üÜì –°–≤–æ–±–æ–¥–Ω–æ: ${availableSlots.length}\n\n` +
    `‚èÆ –ü—Ä–æ—à–µ–¥—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π: ${pastBookings.length}\n` +
    `‚è≠ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π: ${futureBookings.length}\n\n` +
    `üîó Google Calendar: ${isCalendarEnabled() ? '–ü–æ–¥–∫–ª—é—á–µ–Ω ‚úÖ' : '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω ‚ùå'}`;

  await ctx.reply(statsMessage);
});

bot.action('INFO', async (ctx) => {
  await ctx.answerCbQuery().catch(() => {});
  await ctx.reply(infoText, buildMainMenu());
});

bot.action('PRICES', async (ctx) => {
  await ctx.answerCbQuery().catch(() => {});
  await ctx.reply(pricesText, buildMainMenu());
});

bot.action('SLOTS', async (ctx) => {
  await ctx.answerCbQuery().catch(() => {});
  await sendSlotsList(ctx);
});

bot.action('BOOK', async (ctx) => {
  await ctx.answerCbQuery().catch(() => {});
  await sendBookingKeyboard(ctx);
});

bot.action('ASK', async (ctx) => {
  await ctx.answerCbQuery().catch(() => {});
  ctx.session.mode = 'awaiting_question';
  await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel');
});

bot.action('MYBOOKINGS', async (ctx) => {
  await ctx.answerCbQuery().catch(() => {});
  const bookings = getUserBookings(ctx.from.id);
  if (bookings.length === 0) {
    return ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.', buildMainMenu());
  }

  const keyboard = bookings.map((b) => [
    Markup.button.callback(
      `${toLocalTimeString(b.startAt)} - –û—Ç–º–µ–Ω–∏—Ç—å ‚ùå`,
      `CANCEL_BOOKING:${b.id}`
    ),
  ]);
  
  await ctx.reply(
    '–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n' + 
    bookings.map((b) => `‚Ä¢ ${toLocalTimeString(b.startAt)}`).join('\n'),
    Markup.inlineKeyboard(keyboard)
  );
});

bot.action(/BOOK_SLOT:(.+)/, async (ctx) => {
  await ctx.answerCbQuery().catch(() => {});
  const slotId = ctx.match[1];
  const user = ctx.from;
  const userName = user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  const userContact = user.username ? `@${user.username}` : `ID: ${user.id}`;

  // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
  let calendarEventId = undefined;
  if (isCalendarEnabled()) {
    const slotForCalendar = getAvailableSlots().find((s) => s.id === slotId);
    if (slotForCalendar) {
      calendarEventId = await createCalendarEvent(slotForCalendar, userName, userContact);
    }
  }

  const booked = reserveSlot(slotId, user.id, userName, userContact, calendarEventId);
  if (!booked) {
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    if (calendarEventId) {
      await deleteCalendarEvent(calendarEventId);
    }
    return ctx.reply('–£–≤—ã, —ç—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.');
  }

  const adminMessage =
    `‚úÖ –ù–æ–≤–∞—è –±—Ä–æ–Ω—å:\n` +
    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName} ${userContact}\n` +
    `–°–ª–æ—Ç: ${toLocalTimeString(booked.startAt)}` +
    (calendarEventId ? '\nüìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å' : '');
  
  if (ADMIN_CHAT_ID) {
    await ctx.telegram.sendMessage(ADMIN_CHAT_ID, adminMessage).catch(() => {});
  }
  
  await ctx.reply(
    `‚úÖ –ì–æ—Ç–æ–≤–æ! –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ ${toLocalTimeString(booked.startAt)}.\n\n` +
    `–Ø –ø—Ä–∏—à–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –∑–∞–Ω—è—Ç–∏—è.`
  );
});

bot.action(/CANCEL_BOOKING:(.+)/, async (ctx) => {
  await ctx.answerCbQuery().catch(() => {});
  const slotId = ctx.match[1];
  const result = cancelBooking(slotId, ctx.from.id);
  
  if (!result) {
    return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
  }

  // –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ Google Calendar
  if (result.calendarEventId) {
    await deleteCalendarEvent(result.calendarEventId);
  }

  // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
  if (ADMIN_CHAT_ID) {
    const adminMessage =
      `‚ùå –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏:\n` +
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${result.slot.userName} ${result.slot.userContact}\n` +
      `–°–ª–æ—Ç: ${toLocalTimeString(result.slot.startAt)}`;
    await ctx.telegram.sendMessage(ADMIN_CHAT_ID, adminMessage).catch(() => {});
  }

  await ctx.reply(
    `‚ùå –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞: ${toLocalTimeString(result.slot.startAt)}\n\n` +
    `–°–ª–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏.`,
    buildMainMenu()
  );
});

bot.on('text', async (ctx) => {
  if (ctx.session.mode !== 'awaiting_question') return;
  const user = ctx.from;
  const messageForAdmin =
    `–í–æ–ø—Ä–æ—Å –æ—Ç ${user.first_name || ''} @${user.username || ''} (id: ${user.id}):\n\n${ctx.message.text}`;
  if (ADMIN_CHAT_ID) {
    await ctx.telegram.sendMessage(ADMIN_CHAT_ID, messageForAdmin).catch(() => {});
  }
  ctx.session.mode = undefined;
  await ctx.reply('–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û—Ç–≤–µ—Ç –ø–æ—Å—Ç—É–ø–∏—Ç –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.', buildMainMenu());
});

// –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ). –î–æ—Å—Ç—É–ø –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ.
bot.command('addslot', async (ctx) => {
  // –§–æ—Ä–º–∞—Ç: /addslot 2025-10-25T12:00:00Z 55
  const parts = ctx.message.text.split(/\s+/);
  const iso = parts[1];
  const duration = Number(parts[2] || 55);
  if (!iso) return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addslot 2025-10-25T12:00:00Z 55');
  const created = addSlot(iso, duration);
  if (!created) return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.');
  await ctx.reply(`–°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω: ${toLocalTimeString(created.startAt)} (${duration} –º–∏–Ω)`);
});

bot.command('removeslot', async (ctx) => {
  // –§–æ—Ä–º–∞—Ç: /removeslot s1
  const parts = ctx.message.text.split(/\s+/);
  const id = parts[1];
  if (!id) return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeslot <slotId>');
  const ok = removeSlot(id);
  await ctx.reply(ok ? '–°–ª–æ—Ç —É–¥–∞–ª—ë–Ω.' : '–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
});

bot.command('listslots', async (ctx) => {
  const all = listAllSlots();
  if (all.length === 0) return ctx.reply('–°–ª–æ—Ç–æ–≤ –Ω–µ—Ç.');
  const lines = all.map((s) => `‚Ä¢ ${s.id}: ${toLocalTimeString(s.startAt)} ‚Äî ${s.isBooked ? '–∑–∞–Ω—è—Ç' : '—Å–≤–æ–±–æ–¥–µ–Ω'}`);
  await ctx.reply(lines.join('\n'));
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å –¥–æ –∑–∞–Ω—è—Ç–∏—è
// –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å
cron.schedule('0 * * * *', async () => {
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
  const upcomingBookings = getUpcomingBookings(24);
  
  for (const booking of upcomingBookings) {
    if (!booking.bookedBy) continue;
    
    const reminderMessage =
      `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n` +
      `–ó–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –∑–∞–Ω—è—Ç–∏–µ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ:\n` +
      `üìÖ ${toLocalTimeString(booking.startAt)}\n\n` +
      `–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –î–æ –≤—Å—Ç—Ä–µ—á–∏!`;
    
    try {
      await bot.telegram.sendMessage(booking.bookedBy, reminderMessage);
      console.log(`–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${booking.bookedBy}`);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${booking.bookedBy}:`, error.message);
    }
  }
});

bot.launch({ dropPendingUpdates: true }).then(() => {
  console.log('Bot started (polling)‚Ä¶');
  console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å).');
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));


